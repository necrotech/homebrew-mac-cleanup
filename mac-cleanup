#!/usr/bin/env bash
# vim: ai:ts=2:sw=2:et

set -E
trap cleanup SIGINT SIGTERM ERR EXIT

cleanup() {
	trap - SIGINT SIGTERM ERR EXIT
}

# Default arguments
update=false

usage() {
	cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-u]

A Mac Cleaning up Utility by fwartner
https://github.com/mac-cleanup/mac-cleanup-sh

Available options:

-h, --help       Print this help and exit
-d, --dry-run    Print approx space to be cleaned
-v, --verbose    Print script debug info
-u, --update     Run brew update
EOF
	exit
}

# shellcheck disable=SC2034  # Unused variables left for readability
setup_colors() {
	if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
		NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
	else
		NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
	fi
}

msg() {
	echo >&2 -e "${1-}"
}

die() {
	local msg=$1
	local code=${2-1} # default exit status 1
	msg "$msg"
	exit "$code"
}

parse_params() {
	# default values of variables set from params
	update=false

	while :; do
		case "${1-}" in
		-h | --help) usage ;;
		-v | --verbose) set -x ;;
		-d | --dry-run) dry_run=true ;;
		--no-color) NO_COLOR=1 ;;
		-u | --update) update=true ;; # update flag
		-n) true ;;                   # This is a legacy option, now default behaviour
		-?*) die "Unknown option: $1" ;;
		*) break ;;
		esac
		shift
	done

	return 0
}

parse_params "$@"
setup_colors

deleteCaches() {
	local cacheName=$1
	shift
	local paths=("$@")
	echo "Initiating cleanup ${cacheName} cache..."
	for folderPath in "${paths[@]}"; do
		if [[ -d ${folderPath} ]]; then
			dirSize=$(du -hs "${folderPath}" | awk '{print $1}')
			echo "Deleting ${folderPath} to free up ${dirSize}..."
			rm -rfv "${folderPath}"
		fi
	done
}

bytesToHuman() {
	b=${1:-0}
	d=''
	s=1
	S=(Bytes {K,M,G,T,E,P,Y,Z}iB)
	while ((b > 1024)); do
		d="$(printf ".%02d" $((b % 1024 * 100 / 1024)))"
		b=$((b / 1024))
		((s++))
	done
	if [ -z "$dry_run" ]; then
    msg "$b$d ${S[$s]} of space was cleaned up"
  else
    msg "Approx $b$d ${S[$s]} of space will be cleaned up"
  fi
}

count_dry() {
  if [ -d "$1" ] || [ -f "$1" ]; then  # du throws lots of errors in .sh, wierd...
    if [ -n "$dry_results" ]; then
      temp_dry_results=$(sudo du -sAk "$1" | awk '{ print $1 }')
      dry_results="$((dry_results+temp_dry_results))"
    else
      dry_results="$(sudo du -sAk "$1" | awk '{ print $1 }')"
    fi
  fi
}

# Ask for the administrator password upfront
sudo -v

# Keep-alive sudo until `mac-cleanup.sh` has finished
while true; do
	sudo -n true
	sleep 60
	kill -0 "$$" || exit
done 2>/dev/null &

if [ -z "$dry_run" ]; then
  # Save the amount of used space on the system volume for comparison later.
  oldAvailable=$(df / | tail -1 | awk '{print $4}')

  # Trash
  msg 'Emptying the Trash ðŸ—‘ on all mounted volumes and the main HDD...'
  sudo rm -rfv /Volumes/*/.Trashes/* &>/dev/null
  sudo rm -rfv ~/.Trash/* &>/dev/null
else
  count_dry "/Volumes/*/.Trashes/*"
  count_dry "$HOME/.Trash/*"
fi

# Caches
if [ -z "$dry_run" ]; then
  msg 'Clearing System Cache Files...'
  sudo rm -rfv /Library/Caches/* &>/dev/null
  sudo rm -rfv /System/Library/Caches/* &>/dev/null
	msg 'Clearing User Cache Files...'
  sudo rm -rfv ~/Library/Caches/* &>/dev/null
  sudo rm -rfv /private/var/folders/bh/*/*/*/* &>/dev/null
else
  count_dry "/Library/Caches/*"
  count_dry "/System/Library/Caches/*"
  count_dry "$HOME/Library/Caches/*"
  count_dry "/private/var/folders/bh/*/*/*/*"
fi

# Logs
if [ -z "$dry_run" ]; then
  msg 'Clearing System Log Files...'
  sudo rm -rfv /private/var/log/asl/*.asl &>/dev/null
  sudo rm -rfv /Library/Logs/DiagnosticReports/* &>/dev/null
  sudo rm -rfv /Library/Logs/CreativeCloud/* &>/dev/null
  sudo rm -rfv /Library/Logs/Adobe/* &>/dev/null
  sudo rm -fv /Library/Logs/adobegc.log &>/dev/null
	msg 'Clearing User Log Files...'
  rm -rfv ~/Library/Containers/com.apple.mail/Data/Library/Logs/Mail/* &>/dev/null
  rm -rfv ~/Library/Logs/CoreSimulator/* &>/dev/null
else
  count_dry "/private/var/log/asl/*.asl"
  count_dry "/Library/Logs/DiagnosticReports/*"
  count_dry "/Library/Logs/CreativeCloud/*"
  count_dry "/Library/Logs/Adobe/*"
  count_dry "/Library/Logs/adobegc.log"
  count_dry "$HOME/Library/Containers/com.apple.mail/Data/Library/Logs/Mail/*"
  count_dry "$HOME/Library/Logs/CoreSimulator/*"
fi

# Jetbrains PhpStorm
if [ -d ~/Library/Logs/JetBrains/ ]; then
  if [ -z "$dry_run" ]; then
    msg 'Clearing all application log files from JetBrains...'
    rm -rfc ~/Library/Logs/JetBrains/*/ &>/dev/null
  else
    count_dry "$HOME/Library/Logs/JetBrains/*/"
  fi
fi

# Adobe apps
if [[ -d ~/Library/Application\ Support/Adobe/ ]]; then
  msg 'Clearing Adobe Cache Files...'
  if [ -z "$dry_run" ]; then
    sudo rm -rfv ~/Library/Application\ Support/Adobe/Common/Media\ Cache\ Files/* &>/dev/null
  else
    count_dry "$HOME/Library/Application\ Support/Adobe/Common/Media\ Cache\ Files/*"
  fi
fi

# Chrome
if [ -d ~/Library/Application\ Support/Google/Chrome/ ]; then
  if [ -z "$dry_run" ]; then
    msg 'Clearing Google Chrome Cache Files...'
    sudo rm -rfv ~/Library/Application\ Support/Google/Chrome/Default/Application\ Cache/* &>/dev/null
  else
    count_dry "$HOME/Library/Application\ Support/Google/Chrome/Default/Application\ Cache/*"
  fi
fi

# iOS stuff
if [ -z "$dry_run" ]; then
  msg 'Cleaning up iOS Applications...'
  rm -rfv ~/Music/iTunes/iTunes\ Media/Mobile\ Applications/* &>/dev/null
else
  count_dry "$HOME/Music/iTunes/iTunes\ Media/Mobile\ Applications/*"
fi

if [ -z "$dry_run" ]; then
  msg 'Removing iOS Device Backups...'
  rm -rfv ~/Library/Application\ Support/MobileSync/Backup/* &>/dev/null
else
  count_dry "$HOME/Library/Application\ Support/MobileSync/Backup/*"
fi

# XCode
if [ -z "$dry_run" ]; then
  msg 'Cleaning up XCode Derived Data and Archives...'
  rm -rfv ~/Library/Developer/Xcode/DerivedData/* &>/dev/null
  rm -rfv ~/Library/Developer/Xcode/Archives/* &>/dev/null
  rm -rfv ~/Library/Developer/Xcode/iOS Device Logs/* &>/dev/null
else
  count_dry "$HOME/Library/Developer/Xcode/DerivedData/*"
  count_dry "$HOME/Library/Developer/Xcode/Archives/*"
  count_dry "$HOME/Library/Developer/Xcode/iOS Device Logs/*"
fi

if type "xcrun" &>/dev/null; then  # TODO add count_dry
	if [ -z "$dry_run" ]; then
    msg 'Cleaning up iOS Simulators...'
    osascript -e 'tell application "com.apple.CoreSimulator.CoreSimulatorService" to quit' &>/dev/null
    osascript -e 'tell application "iOS Simulator" to quit' &>/dev/null
    osascript -e 'tell application "Simulator" to quit' &>/dev/null
    xcrun simctl shutdown all &>/dev/null
    xcrun simctl erase all &>/dev/null
  fi
fi

# Dropbox cache
if [ -d "/Users/${HOST}/Dropbox" ]; then
	if [ -z "$dry_run" ]; then
    msg 'Clearing Dropbox ðŸ“¦ Cache Files...'
	  sudo rm -rfv ~/Dropbox/.dropbox.cache/* &>/dev/null
	else
	  count_dry "$HOME/Dropbox/.dropbox.cache/*"
	fi
fi

# Google Drive (not Backup and Sync)
if [ -d ~/Library/Application\ Support/Google/DriveFS/ ]; then
  if [ -z "$dry_run" ]; then
    msg 'Clearing Google Drive File Stream Cache Files...'
    killall "Google Drive File Stream"
    rm -rfv ~/Library/Application\ Support/Google/DriveFS/[0-9a-zA-Z]*/content_cache &>/dev/null
  else
    count_dry "$HOME/Library/Application\ Support/Google/DriveFS/[0-9a-zA-Z]*/content_cache"
  fi
fi

if type "composer" &>/dev/null; then  # TODO add count_dry
	if [ -z "$dry_run" ]; then
    msg 'Cleaning up composer...'
    composer clearcache --no-interaction &>/dev/null
  fi
fi

# Deletes Steam caches, logs, and temp files
# -Astro
if [[ -d ~/Library/Application\ Support/Steam/ ]]; then
	if [ -z "$dry_run" ]; then
    msg 'Clearing Steam Cache, Log, and Temp Files...'
    rm -rfv ~/Library/Application\ Support/Steam/appcache &>/dev/null
    rm -rfv ~/Library/Application\ Support/Steam/depotcache &>/dev/null
    rm -rfv ~/Library/Application\ Support/Steam/logs &>/dev/null
    rm -rfv ~/Library/Application\ Support/Steam/steamapps/shadercache &>/dev/null
    rm -rfv ~/Library/Application\ Support/Steam/steamapps/temp &>/dev/null
    rm -rfv ~/Library/Application\ Support/Steam/steamapps/download &>/dev/null
  else
    count_dry "$HOME/Library/Application\ Support/Steam/appcache"
    count_dry "$HOME/Library/Application\ Support/Steam/depotcache"
    count_dry "$HOME/Library/Application\ Support/Steam/logs"
    count_dry "$HOME/Library/Application\ Support/Steam/steamapps/shadercache"
    count_dry "$HOME/Library/Application\ Support/Steam/steamapps/temp"
    count_dry "$HOME/Library/Application\ Support/Steam/steamapps/download"
  fi
fi

# Deletes Minecraft logs
# -Astro
if [[ -d ~/Library/Application\ Support/minecraft ]]; then
	if [ -z "$dry_run" ]; then
    msg 'Clearing Minecraft Cache and Log Files...'
    rm -rfv ~/Library/Application\ Support/minecraft/logs &>/dev/null
    rm -rfv ~/Library/Application\ Support/minecraft/crash-reports &>/dev/null
    rm -rfv ~/Library/Application\ Support/minecraft/webcache &>/dev/null
    rm -rfv ~/Library/Application\ Support/minecraft/webcache2 &>/dev/null
    rm -rfv ~/Library/Application\ Support/minecraft/crash-reports &>/dev/null
    rm -rfv ~/Library/Application\ Support/minecraft/*.log &>/dev/null
    rm -rfv ~/Library/Application\ Support/minecraft/launcher_cef_log.txt &>/dev/null
  else
    count_dry "$HOME/Library/Application\ Support/minecraft/logs"
    count_dry "$HOME/Library/Application\ Support/minecraft/crash-reports"
    count_dry "$HOME/Library/Application\ Support/minecraft/webcache"
    count_dry "$HOME/Library/Application\ Support/minecraft/webcache2"
    count_dry "$HOME/Library/Application\ Support/minecraft/crash-reports"
    count_dry "$HOME/Library/Application\ Support/minecraft/*.log"
    count_dry "$HOME/Library/Application\ Support/minecraft/launcher_cef_log.txt"
  fi
	if [ -d ~/Library/Application\ Support/minecraft/.mixin.out ]; then
		if [ -z "$dry_run" ]; then
		  rm -rfv ~/Library/Application\ Support/minecraft/.mixin.out &>/dev/null
		else
		  count_dry "$HOME/Library/Application\ Support/minecraft/.mixin.out"
		fi
	fi
fi

# Deletes Lunar Client logs (Minecraft alternate client)
# -Astro
if [[ -d ~/.lunarclient ]]; then
	if [ -z "$dry_run" ]; then
    msg 'Deleting Lunar Client logs and caches...'
    rm -rfv ~/.lunarclient/game-cache &>/dev/null
    rm -rfv ~/.lunarclient/launcher-cache &>/dev/null
    rm -rfv ~/.lunarclient/logs &>/dev/null
    rm -rfv ~/.lunarclient/offline/*/logs &>/dev/null
    rm -rfv ~/.lunarclient/offline/files/*/logs &>/dev/null
  else
    count_dry "$HOME/.lunarclient/game-cache"
    count_dry "$HOME/.lunarclient/launcher-cache"
    count_dry "$HOME/.lunarclient/logs"
    count_dry "$HOME/.lunarclient/offline/*/logs"
    count_dry "$HOME/.lunarclient/offline/files/*/logs"
  fi
fi

# Deletes Wget logs
# -Astro
if [[ -d ~/wget-log ]]; then
	if [ -z "$dry_run" ]; then
    msg 'Deleting Wget log and hosts file...'
    rm -rfv ~/wget-log &>/dev/null
    rm -rfv ~/.wget-hsts &>/dev/null
  else
    count_dry "$HOME/wget-log"
    count_dry "$HOME/.wget-hsts"
  fi
fi

# Deletes Cacher logs
# I dunno either
# -Astro
if [[ -d ~/.cacher ]]; then
	if [ -z "$dry_run" ]; then
    msg 'Deleting Cacher logs...'
    rm -rfv ~/.cacher/logs &>/dev/null
  else
    count_dry "$HOME/.cacher/logs"
  fi
fi

# Deletes Android (studio?) cache
# -Astro
if [[ -d ~/.android ]]; then
	if [ -z "$dry_run" ]; then
    msg 'Deleting Android cache...'
    rm -rfv ~/.android/cache &>/dev/null
  else
    count_dry "$HOME/.android/cache"
  fi
fi

# Clears Gradle caches
# -Astro
if [ -d ~/.gradle ]; then
	if [ -z "$dry_run" ]; then
    msg 'Clearing Gradle caches...'
    rm -rfv ~/.gradle/caches &>/dev/null
  else
    count_dry "$HOME/.gradle/caches"
  fi
fi

# Deletes Kite Autocomplete logs
# -Astro
if [[ -d ~/.kite ]]; then
	if [ -z "$dry_run" ]; then
    msg 'Deleting Kite logs...'
    rm -rfv ~/.kite/logs &>/dev/null
  else
    count_dry "$HOME/.kite/logs"
  fi
fi

if type "brew" &>/dev/null; then
	if [[ "$update" = true ]]; then
		msg 'Updating Homebrew Recipes...'
		brew update &>/dev/null
		msg 'Upgrading and removing outdated formulae...'
		brew upgrade &>/dev/null
	fi
	if [ -z "$dry_run" ]; then
    msg 'Cleaning up Homebrew Cache...'
    brew cleanup -s &>/dev/null
    rm -rfv "$(brew --cache)" &>/dev/null
    brew tap --repair &>/dev/null
  else
    count_dry "$(brew --cache)"
  fi
fi

# Ruby gems
if type "gem" &>/dev/null; then  # TODO add count_dry
	if [ -z "$dry_run" ]; then
    msg 'Cleaning up any old versions of gems'
    gem cleanup &>/dev/null
  fi
fi

# Docker
if type "docker" &>/dev/null; then  # TODO add count_dry
	if [ -z "$dry_run" ]; then
    if ! docker ps >/dev/null 2>&1; then
      open --background -a Docker
    fi
    msg 'Cleaning up Docker'
    docker system prune -af &>/dev/null
  fi
fi

# Python virtual env
if [ "$PYENV_VIRTUALENV_CACHE_PATH" ]; then
	if [ -z "$dry_run" ]; then
    msg 'Removing Pyenv-VirtualEnv Cache...'
    rm -rfv "$PYENV_VIRTUALENV_CACHE_PATH" &>/dev/null
  else
    count_dry "$PYENV_VIRTUALENV_CACHE_PATH"
  fi
fi

if type "npm" &>/dev/null; then  # TODO add count_dry
	if [ -z "$dry_run" ]; then
    msg 'Cleaning up npm cache...'
    npm cache clean --force &>/dev/null
  fi
fi

if type "yarn" &>/dev/null; then  # TODO add count_dry
	if [ -z "$dry_run" ]; then
    msg 'Cleaning up Yarn Cache...'
    yarn cache clean --force &>/dev/null
  fi
fi

if type "pod" &>/dev/null; then  # TODO add count_dry
	if [ -z "$dry_run" ]; then
    msg 'Cleaning up Pod Cache...'
    pod cache clean --all &>/dev/null
  fi
fi

if type "go" &>/dev/null; then  # TODO add count_dry
	if [ -z "$dry_run" ]; then
    msg 'Clearing Go module cache...'
    go clean -modcache &>/dev/null
  fi
fi

# Deletes all Microsoft Teams Caches and resets it to default - can fix also some performance issues
# -Astro
if [ -d ~/Library/Application\ Support/Microsoft/Teams ]; then
	if [ -z "$dry_run" ]; then
    msg 'Deleting Microsoft Teams logs and caches...'
    rm -rfv ~/Library/Application\ Support/Microsoft/Teams/IndexedDB &>/dev/null
    rm -rfv ~/Library/Application\ Support/Microsoft/Teams/Cache &>/dev/null
    rm -rfv ~/Library/Application\ Support/Microsoft/Teams/Application\ Cache &>/dev/null
    rm -rfv ~/Library/Application\ Support/Microsoft/Teams/Code\ Cache &>/dev/null
    rm -rfv ~/Library/Application\ Support/Microsoft/Teams/blob_storage &>/dev/null
    rm -rfv ~/Library/Application\ Support/Microsoft/Teams/databases &>/dev/null
    rm -rfv ~/Library/Application\ Support/Microsoft/Teams/gpucache &>/dev/null
    rm -rfv ~/Library/Application\ Support/Microsoft/Teams/Local\ Storage &>/dev/null
    rm -rfv ~/Library/Application\ Support/Microsoft/Teams/tmp &>/dev/null
    rm -rfv ~/Library/Application\ Support/Microsoft/Teams/*logs*.txt &>/dev/null
    rm -rfv ~/Library/Application\ Support/Microsoft/Teams/watchdog &>/dev/null
    rm -rfv ~/Library/Application\ Support/Microsoft/Teams/*watchdog*.json &>/dev/null
  else
    count_dry "$HOME/Library/Application\ Support/Microsoft/Teams/IndexedDB"
    count_dry "$HOME/Library/Application\ Support/Microsoft/Teams/Cache"
    count_dry "$HOME/Library/Application\ Support/Microsoft/Teams/Application\ Cache"
    count_dry "$HOME/Library/Application\ Support/Microsoft/Teams/Code\ Cache"
    count_dry "$HOME/Library/Application\ Support/Microsoft/Teams/blob_storage"
    count_dry "$HOME/Library/Application\ Support/Microsoft/Teams/databases"
    count_dry "$HOME/Library/Application\ Support/Microsoft/Teams/gpucache"
    count_dry "$HOME/Library/Application\ Support/Microsoft/Teams/Local\ Storage"
    count_dry "$HOME/Library/Application\ Support/Microsoft/Teams/tmp"
    count_dry "$HOME/Library/Application\ Support/Microsoft/Teams/*logs*.txt"
    count_dry "$HOME/Library/Application\ Support/Microsoft/Teams/watchdog"
    count_dry "$HOME/Library/Application\ Support/Microsoft/Teams/*watchdog*.json"
  fi
fi

if [ -z "$dry_run" ]; then
  msg 'Cleaning up DNS cache...'  # TODO add count_dry
  sudo dscacheutil -flushcache &>/dev/null
  sudo killall -HUP mDNSResponder &>/dev/null
fi

if [ -z "$dry_run" ]; then
  msg 'Purging inactive memory...'  # TODO add count_dry
  sudo purge &>/dev/null
fi

if [ -z "$dry_run" ]; then
  msg "${GREEN}Success!${NOFORMAT}"

	# Calculate the change in available disk space
  newAvailable=$(df / | tail -1 | awk '{print $4}')
  count=$((newAvailable - oldAvailable))
  bytesToHuman $count
else
  if [ -n "$dry_results" ]; then
    bytesToHuman "$dry_results"
    msg "Continue? [enter]"
    read -r -s -n 1 clean_after_dry_run
    if [[ $clean_after_dry_run = "" ]]; then
      exec "$0"
    fi
  else
    echo "Error occured with dry run..."
    exit 1
  fi
fi

cleanup
